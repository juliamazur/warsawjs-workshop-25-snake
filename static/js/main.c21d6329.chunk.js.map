{"version":3,"sources":["components/Snake.js","components/Fruit.js","App.js","serviceWorker.js","index.js"],"names":["Snake","moveDown","_this","setPosition","state","cx","cy","setState","this","props","snakeSegments","map","segment","index","react_default","a","createElement","key","r","fill","React","Component","Fruit","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","moveSnake","slice","growth","oldHead","newHead","objectSpread","direction","x","boardWidth","y","boardHeight","splice","unshift","newState","dieIfCollide","snakeHead","doItemsCollide","pause","showNewFruits","fruits","length","Math","floor","random","newFruit","push","hideRottenFruits","eatFruits","fruit","setDirection","b","minRequiredDistance","abs","tick","paused","togglePause","start","clearInterval","gameInterval","setInterval","speed","_this2","window","addEventListener","e","keyCode","className","height","width","components_Snake","components_Fruit","defaultProps","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c21d6329.chunk.js","sourcesContent":["import React from 'react';\n\nclass Snake extends React.Component {\n\n\n\n    moveDown = () => {\n        this.setPosition(this.state.cx, this.state.cy + 10);\n    }\n\n    setPosition = (cx, cy) => {\n        this.setState({\n            cx: cx,\n            cy: cy,\n        });\n    }\n\n\n\n    render(){\n        return (\n            this.props.snakeSegments.map((segment, index) => {\n                return (\n                    <circle key={index} cx={segment.cx} cy={segment.cy} r={segment.r} fill=\"lightgreen\" />\n                )\n              })\n        );\n\n    }\n\n}\n\nexport default Snake;\n","import React from 'react';\n\nclass Fruit extends React.Component {\n\n    render(){\n        return (\n           <circle cx={this.props.cx} cy={this.props.cy} r={this.props.r} fill=\"lightpink\" />\n\n        );\n\n    }\n\n}\n\nexport default Fruit;\n","import React, { Component } from 'react';\nimport Snake from './components/Snake';\nimport Fruit from './components/Fruit';\nimport './App.css';\n\nclass App extends Component {\n\n  static defaultProps = {\n    boardWidth: 300,\n    boardHeight: 300,\n    speed: 100,\n  };\n\n  constructor(props) {\n        super(props);\n\n        let gameInterval = setInterval(this.tick, this.props.speed);\n        this.state = {\n            gameInterval: gameInterval,\n            growth: 0,\n            direction: {\n                x: 1,\n                y: 0,\n            },\n            snakeSegments: [\n                {\n                    cx: 50,\n                    cy: 50,\n                    r: 10,\n                },\n            ],\n            fruits: [],\n        };\n    }\n\n  moveSnake = () => {\n      let snakeSegments = this.state.snakeSegments.slice();\n      let growth = this.state.growth;\n\n      const oldHead = snakeSegments[0];\n      let newHead = {...oldHead};\n      // TODO waz ucieka\n      newHead.cx = (oldHead.cx + 2 * oldHead.r * this.state.direction.x + this.props.boardWidth) % this.props.boardWidth;\n      newHead.cy = (oldHead.cy + 2 * oldHead.r * this.state.direction.y + this.props.boardHeight) % this.props.boardHeight;\n      if (!growth) {\n          snakeSegments.splice(-1,1);\n      } else {\n          growth--;\n      }\n\n      snakeSegments.unshift(newHead);\n\n      const newState = {\n          ...this.state,\n          snakeSegments: snakeSegments,\n          growth: growth,\n      };\n      this.setState(newState);\n      return;\n  }\n\n  dieIfCollide = () => {\n      const snakeHead = this.state.snakeSegments[0];\n      this.state.snakeSegments.map(((segment, index) => {\n          if(index !== 0 && this.doItemsCollide(snakeHead, segment)) {\n              this.pause();\n          }\n          return true;\n      }))\n  }\n\n  showNewFruits = () => {\n      if(this.state.fruits.length > 9 || Math.floor((Math.random() * 10) + 1) !== 1) {\n         return;\n      }\n\n      const newFruit = {\n          r: 7,\n          cx: 10 * Math.floor((Math.random() * 30) + 1),\n          cy: 10 * Math.floor((Math.random() * 30) + 1),\n      }\n\n      let fruits = this.state.fruits.slice();\n      fruits.push(newFruit);\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n      };\n      this.setState(newState);\n      return;\n  }\n\n  hideRottenFruits = () => {\n      if(this.state.fruits.length < 3 || Math.floor((Math.random() * 30) + 1) !== 1) {\n          return;\n      }\n\n      let fruits = this.state.fruits.slice();\n\n      fruits.splice(-1,1);\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n      };\n      this.setState(newState);\n      return;\n   }\n\n  eatFruits = () => {\n    let growth = this.state.growth;\n    let fruits = this.state.fruits.slice();\n    const snakeHead = this.state.snakeSegments[0];\n\n    fruits.map(((fruit, index) => {\n      if(this.doItemsCollide(snakeHead, fruit)) {\n          fruits.splice(index, 1);\n          growth++;\n      }\n      return true;\n    }))\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n          growth: growth,\n      };\n      this.setState(newState);\n      return;\n  }\n\n  setDirection = (x, y)  => {\n    const newState = {\n        ...this.state,\n        direction: {\n            x: x,\n            y: y,\n        },\n    };\n    this.setState(newState);\n  }\n\n  doItemsCollide = (a, b) => {\n    const minRequiredDistance = a.r + b.r;\n    return Math.abs(a.cx - b.cx) < minRequiredDistance\n      && Math.abs(a.cy - b.cy) < minRequiredDistance;\n  }\n\n  tick = () => {\n    // console.log('tick');\n    this.dieIfCollide();\n    if (this.state.paused) {\n        return;\n    }\n    this.eatFruits();\n    this.moveSnake();\n    this.showNewFruits();\n    this.hideRottenFruits();\n   }\n\n   togglePause = ()  => {\n       if (this.state.paused) {\n         this.start();\n       } else {\n         this.pause();\n       }\n   }\n\n   pause = ()  => {\n        // TODO nie modyfikowac state\n       clearInterval(this.state.gameInterval);\n       const newState = {\n           ...this.state,\n           paused: true,\n       };\n       this.setState(newState);\n   }\n\n   start = ()  => {\n       let gameInterval = setInterval(this.tick, this.props.speed);\n       const newState = {\n           ...this.state,\n           gameInterval: gameInterval,\n           paused: false,\n       };\n       this.setState(newState);\n   }\n\n    componentDidMount() {\n        window.addEventListener('keydown', (e) => {\n            // console.log('keydown');\n            // console.log(e.keyCode);\n            // down\n            if (e.keyCode === 40) {\n                this.setDirection(0,1);\n            }\n            // up\n            if (e.keyCode === 38) {\n                this.setDirection(0,-1);\n            }\n            // left\n            if (e.keyCode === 37) {\n                this.setDirection(-1,0);\n            }\n            // right\n            if (e.keyCode === 39) {\n                this.setDirection(1,0);\n            }\n        })\n        window.addEventListener('keypress', (e) => {\n            // console.log('keypress');\n            // console.log(e.keyCode);\n            if (e.keyCode === 32) {\n              this.togglePause();\n            }\n        });\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"board\">\n          <svg height={this.props.boardHeight} width={this.props.boardWidth}>\n            <Snake snakeSegments={this.state.snakeSegments}/>\n              {\n                  this.state.fruits.map((fruit, index) => {\n                      return (\n                          <Fruit key={index} cx={fruit.cx} cy={fruit.cy} r={fruit.r} />\n                      )\n                  })\n              }\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}