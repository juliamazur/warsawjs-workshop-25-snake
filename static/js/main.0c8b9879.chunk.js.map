{"version":3,"sources":["components/Snake.js","components/Fruit.js","components/Bomb.js","App.js","serviceWorker.js","index.js"],"names":["Snake","moveDown","_this","setPosition","state","cx","cy","setState","this","props","snakeSegments","map","segment","index","react_default","a","createElement","key","r","fill","React","Component","Fruit","Bomb","App","gameInterval","defaultState","paused","gameOver","growth","direction","x","y","fruits","bombs","moveSnake","slice","oldHead","newHead","Object","objectSpread","boardWidth","boardHeight","splice","unshift","newState","dieIfCollide","snakeHead","doItemsCollide","pause","showNewFruits","length","Math","floor","random","newFruit","push","hideRottenFruits","showNewBombs","newBomb","hideRottenBombs","shift","eatFruits","fruit","eatBombs","bomb","setDirection","b","minRequiredDistance","abs","tick","restart","start","togglePause","clearInterval","setInterval","speed","_this2","window","addEventListener","e","keyCode","className","renderGameOver","height","width","components_Snake","components_Fruit","components_Bomb","defaultProps","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAgCeA,6MA1BXC,SAAW,WACPC,EAAKC,YAAYD,EAAKE,MAAMC,GAAIH,EAAKE,MAAME,GAAK,OAGpDH,YAAc,SAACE,EAAIC,GACfJ,EAAKK,SAAS,CACVF,GAAIA,EACJC,GAAIA,6EAOR,OACIE,KAAKC,MAAMC,cAAcC,IAAI,SAACC,EAASC,GACnC,OACIC,EAAAC,EAAAC,cAAA,UAAQC,IAAKJ,EAAOR,GAAIO,EAAQP,GAAIC,GAAIM,EAAQN,GAAIY,EAAGN,EAAQM,EAAGC,KAAK,wBArBvEC,IAAMC,WCYXC,mLATP,OACGR,EAAAC,EAAAC,cAAA,UAAQX,GAAIG,KAAKC,MAAMJ,GAAIC,GAAIE,KAAKC,MAAMH,GAAIY,EAAGV,KAAKC,MAAMS,EAAGC,KAAK,qBAJ3DC,IAAMC,WCYXE,mLATP,OACGT,EAAAC,EAAAC,cAAA,UAAQX,GAAIG,KAAKC,MAAMJ,GAAIC,GAAIE,KAAKC,MAAMH,GAAIY,EAAGV,KAAKC,MAAMS,EAAGC,KAAK,oBAJ5DC,IAAMC,WCInBG,oNAEJC,aAAe,OAQfC,aAAe,CACXC,QAAQ,EACRC,UAAU,EACVC,OAAQ,EACRC,UAAW,CACPC,EAAG,EACHC,EAAG,GAEPtB,cAAe,CACX,CACIL,GAAI,GACJC,GAAI,GACJY,EAAG,KAGXe,OAAQ,GACRC,MAAO,MAGX9B,MAAQF,EAAKwB,eAEbS,UAAY,WACR,IAAIzB,EAAgBR,EAAKE,MAAMM,cAAc0B,QACzCP,EAAS3B,EAAKE,MAAMyB,OAElBQ,EAAU3B,EAAc,GAC1B4B,EAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAOF,GAClBC,EAAQjC,IAAMgC,EAAQhC,GAAK,EAAIgC,EAAQnB,EAAIhB,EAAKE,MAAM0B,UAAUC,EAAI7B,EAAKO,MAAMgC,YAAcvC,EAAKO,MAAMgC,WACxGH,EAAQhC,IAAM+B,EAAQ/B,GAAK,EAAI+B,EAAQnB,EAAIhB,EAAKE,MAAM0B,UAAUE,EAAI9B,EAAKO,MAAMiC,aAAexC,EAAKO,MAAMiC,YACpGb,EAGDA,IAFAnB,EAAciC,QAAQ,EAAE,GAK5BjC,EAAckC,QAAQN,GAEtB,IAAMO,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEVM,cAAeA,EACfmB,OAAQA,IAEZ3B,EAAKK,SAASsC,MAIlBC,aAAe,WACX,IAAMC,EAAY7C,EAAKE,MAAMM,cAAc,GAC3CR,EAAKE,MAAMM,cAAcC,IAAK,SAACC,EAASC,GAIpC,OAHa,IAAVA,GAAeX,EAAK8C,eAAeD,EAAWnC,IAC7CV,EAAK0B,YAEF,OAIfA,SAAW,WACP1B,EAAK+C,QACL,IAAMJ,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEVwB,UAAU,IAEd1B,EAAKK,SAASsC,MAGlBK,cAAgB,WACZ,KAAGhD,EAAKE,MAAM6B,OAAOkB,OAAS,GAA8C,IAAzCC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAArE,CAIA,IAAMC,EAAW,CACbrC,EAAG,EACHb,GAAI,GAAK+C,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC3ChD,GAAI,GAAK8C,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAG3CrB,EAAS/B,EAAKE,MAAM6B,OAAOG,QAC/BH,EAAOuB,KAAKD,GAEZ,IAAMV,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEV6B,OAAQA,IAEZ/B,EAAKK,SAASsC,OAIlBY,iBAAmB,WACf,KAAGvD,EAAKE,MAAM6B,OAAOkB,OAAS,GAA8C,IAAzCC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAArE,CAIA,IAAIrB,EAAS/B,EAAKE,MAAM6B,OAAOG,QAE/BH,EAAOU,QAAQ,EAAE,GAEjB,IAAME,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEV6B,OAAQA,IAEZ/B,EAAKK,SAASsC,OAIhBa,aAAe,WACX,KAAGxD,EAAKE,MAAM8B,MAAMiB,OAAS,GAA8C,IAAzCC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAApE,CAIA,IAAMK,EAAU,CACZzC,EAAG,EACHb,GAAI,GAAK+C,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAC3ChD,GAAI,GAAK8C,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,IAG3CpB,EAAQhC,EAAKE,MAAM8B,MAAME,QAC7BF,EAAMsB,KAAKG,GAEX,IAAMd,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEV8B,MAAOA,IAEXhC,EAAKK,SAASsC,OAIlBe,gBAAkB,WACd,GAA+B,IAA5B1D,EAAKE,MAAM8B,MAAMiB,QAAyD,IAAzCC,KAAKC,MAAuB,GAAhBD,KAAKE,SAAiB,GAAtE,CAIA,IAAIpB,EAAQhC,EAAKE,MAAM8B,MAAME,QAE7BF,EAAM2B,QAEN,IAAMhB,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEV8B,MAAOA,IAEXhC,EAAKK,SAASsC,OAIpBiB,UAAY,WACV,IAAIjC,EAAS3B,EAAKE,MAAMyB,OACpBI,EAAS/B,EAAKE,MAAM6B,OAAOG,QACzBW,EAAY7C,EAAKE,MAAMM,cAAc,GAE3CuB,EAAOtB,IAAK,SAACoD,EAAOlD,GAKlB,OAJGX,EAAK8C,eAAeD,EAAWgB,KAC9B9B,EAAOU,OAAO9B,EAAO,GACrBgB,MAEG,IAGP,IAAMgB,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEV6B,OAAQA,EACRJ,OAAQA,IAEZ3B,EAAKK,SAASsC,MAIhBmB,SAAW,WACP,IAAMjB,EAAY7C,EAAKE,MAAMM,cAAc,GAE3CR,EAAKE,MAAM8B,MAAMvB,IAAK,SAACsD,EAAMpD,GAIzB,OAHGX,EAAK8C,eAAeD,EAAWkB,IAC9B/D,EAAK0B,YAEF,OAIjBsC,aAAe,SAACnC,EAAGC,GAGjB,KAAG9B,EAAKE,MAAM0B,UAAUC,EAAIA,GAAK7B,EAAKE,MAAM0B,UAAUE,EAAIA,GAA1D,CAIE,IAAMa,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACTrC,EAAKE,MADI,CAEZ0B,UAAW,CACPC,EAAGA,EACHC,EAAGA,KAGX9B,EAAKK,SAASsC,OAGhBG,eAAiB,SAACjC,EAAGoD,GACnB,IAAMC,EAAsBrD,EAAEG,EAAIiD,EAAEjD,EACpC,OAAOkC,KAAKiB,IAAItD,EAAEV,GAAK8D,EAAE9D,IAAM+D,GAC1BhB,KAAKiB,IAAItD,EAAET,GAAK6D,EAAE7D,IAAM8D,KAG/BE,KAAO,WAELpE,EAAK4C,eACD5C,EAAKE,MAAMuB,SAGfzB,EAAK8D,WACL9D,EAAK4D,YACL5D,EAAKiC,YACLjC,EAAKgD,gBACLhD,EAAKuD,mBACLvD,EAAKwD,eACLxD,EAAK0D,sBAGNW,QAAU,WACHrE,EAAKE,MAAMwB,WACV1B,EAAKK,SAASL,EAAKwB,cACnBxB,EAAKsE,YAIbC,YAAc,WAERvE,EAAKE,MAAMwB,WAIV1B,EAAKE,MAAMuB,OACZzB,EAAKsE,QAELtE,EAAK+C,YAIXA,MAAQ,WACJyB,cAAcxE,EAAKuB,cACnB,IAAMoB,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEVuB,QAAQ,IAEZzB,EAAKK,SAASsC,MAGlB2B,MAAQ,WACJtE,EAAKuB,aAAekD,YAAYzE,EAAKoE,KAAMpE,EAAKO,MAAMmE,OACtD,IAAM/B,EAAQN,OAAAC,EAAA,EAAAD,CAAA,GACPrC,EAAKE,MADE,CAEVuB,QAAQ,IAEZzB,EAAKK,SAASsC,uFAGG,IAAAgC,EAAArE,KAChBsE,OAAOC,iBAAiB,UAAW,SAACC,GAId,KAAdA,EAAEC,SACFJ,EAAKX,aAAa,EAAE,GAGN,KAAdc,EAAEC,SACFJ,EAAKX,aAAa,GAAG,GAGP,KAAdc,EAAEC,SACFJ,EAAKX,cAAc,EAAE,GAGP,KAAdc,EAAEC,SACFJ,EAAKX,aAAa,EAAE,KAG5BY,OAAOC,iBAAiB,WAAY,SAACC,GAEf,KAAdA,EAAEC,SACJJ,EAAKJ,cAGW,KAAdO,EAAEC,SACFJ,EAAKN,YAGb/D,KAAKgE,iDAIP,GAAGhE,KAAKJ,MAAMwB,SACV,OAAQd,EAAAC,EAAAC,cAAA,OAAKkE,UAAU,aAAYpE,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,WAAb,iEAKzC,OACEF,EAAAC,EAAAC,cAAA,OAAKkE,UAAU,OACbpE,EAAAC,EAAAC,cAAA,OAAKkE,UAAU,SACV1E,KAAK2E,iBACRrE,EAAAC,EAAAC,cAAA,OAAKoE,OAAQ5E,KAAKC,MAAMiC,YAAa2C,MAAO7E,KAAKC,MAAMgC,YACrD3B,EAAAC,EAAAC,cAACsE,EAAD,CAAO5E,cAAeF,KAAKJ,MAAMM,gBAE3BF,KAAKJ,MAAM6B,OAAOtB,IAAI,SAACoD,EAAOlD,GAC1B,OACIC,EAAAC,EAAAC,cAACuE,EAAD,CAAOtE,IAAKJ,EAAOR,GAAI0D,EAAM1D,GAAIC,GAAIyD,EAAMzD,GAAIY,EAAG6C,EAAM7C,MAKhEV,KAAKJ,MAAM8B,MAAMvB,IAAI,SAACsD,EAAMpD,GACxB,OACIC,EAAAC,EAAAC,cAACwE,EAAD,CAAMvE,IAAKJ,EAAOR,GAAI4D,EAAK5D,GAAIC,GAAI2D,EAAK3D,GAAIY,EAAG+C,EAAK/C,gBA/T5DG,cAAZG,EAIGiE,aAAe,CACpBhD,WAAY,IACZC,YAAa,IACbkC,MAAO,KAmUIpD,QCtUKkE,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjF,EAAAC,EAAAC,cAACgF,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0c8b9879.chunk.js","sourcesContent":["import React from 'react';\n\nclass Snake extends React.Component {\n\n\n\n    moveDown = () => {\n        this.setPosition(this.state.cx, this.state.cy + 10);\n    }\n\n    setPosition = (cx, cy) => {\n        this.setState({\n            cx: cx,\n            cy: cy,\n        });\n    }\n\n\n\n    render(){\n        return (\n            this.props.snakeSegments.map((segment, index) => {\n                return (\n                    <circle key={index} cx={segment.cx} cy={segment.cy} r={segment.r} fill=\"lightgreen\" />\n                )\n              })\n        );\n\n    }\n\n}\n\nexport default Snake;\n","import React from 'react';\n\nclass Fruit extends React.Component {\n\n    render(){\n        return (\n           <circle cx={this.props.cx} cy={this.props.cy} r={this.props.r} fill=\"lightpink\" />\n\n        );\n\n    }\n\n}\n\nexport default Fruit;\n","import React from 'react';\n\nclass Bomb extends React.Component {\n\n    render(){\n        return (\n           <circle cx={this.props.cx} cy={this.props.cy} r={this.props.r} fill=\"darkgrey\" />\n\n        );\n\n    }\n\n}\n\nexport default Bomb;\n","import React, { Component } from 'react';\nimport Snake from './components/Snake';\nimport Fruit from './components/Fruit';\nimport Bomb from './components/Bomb';\nimport './App.css';\n\nclass App extends Component {\n\n  gameInterval = null;\n\n  static defaultProps = {\n    boardWidth: 300,\n    boardHeight: 300,\n    speed: 100,\n  };\n\n  defaultState = {\n      paused: false,\n      gameOver: false,\n      growth: 0,\n      direction: {\n          x: 1,\n          y: 0,\n      },\n      snakeSegments: [\n          {\n              cx: 50,\n              cy: 50,\n              r: 10,\n          },\n      ],\n      fruits: [],\n      bombs: [],\n  };\n\n  state = this.defaultState;\n\n  moveSnake = () => {\n      let snakeSegments = this.state.snakeSegments.slice();\n      let growth = this.state.growth;\n\n      const oldHead = snakeSegments[0];\n      let newHead = {...oldHead};\n      newHead.cx = (oldHead.cx + 2 * oldHead.r * this.state.direction.x + this.props.boardWidth) % this.props.boardWidth;\n      newHead.cy = (oldHead.cy + 2 * oldHead.r * this.state.direction.y + this.props.boardHeight) % this.props.boardHeight;\n      if (!growth) {\n          snakeSegments.splice(-1,1);\n      } else {\n          growth--;\n      }\n\n      snakeSegments.unshift(newHead);\n\n      const newState = {\n          ...this.state,\n          snakeSegments: snakeSegments,\n          growth: growth,\n      };\n      this.setState(newState);\n      return;\n  }\n\n  dieIfCollide = () => {\n      const snakeHead = this.state.snakeSegments[0];\n      this.state.snakeSegments.map(((segment, index) => {\n          if(index !== 0 && this.doItemsCollide(snakeHead, segment)) {\n              this.gameOver();\n          }\n          return true;\n      }))\n  }\n\n  gameOver = () => {\n      this.pause();\n      const newState = {\n          ...this.state,\n          gameOver: true,\n      };\n      this.setState(newState);\n  }\n\n  showNewFruits = () => {\n      if(this.state.fruits.length > 9 || Math.floor((Math.random() * 10) + 1) !== 1) {\n         return;\n      }\n\n      const newFruit = {\n          r: 7,\n          cx: 10 * Math.floor((Math.random() * 30) + 1),\n          cy: 10 * Math.floor((Math.random() * 30) + 1),\n      }\n\n      let fruits = this.state.fruits.slice();\n      fruits.push(newFruit);\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n      };\n      this.setState(newState);\n      return;\n  }\n\n  hideRottenFruits = () => {\n      if(this.state.fruits.length < 3 || Math.floor((Math.random() * 30) + 1) !== 1) {\n          return;\n      }\n\n      let fruits = this.state.fruits.slice();\n\n      fruits.splice(-1,1);\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n      };\n      this.setState(newState);\n      return;\n   }\n\n    showNewBombs = () => {\n        if(this.state.bombs.length > 1 || Math.floor((Math.random() * 60) + 1) !== 1) {\n            return;\n        }\n\n        const newBomb = {\n            r: 8,\n            cx: 10 * Math.floor((Math.random() * 30) + 1),\n            cy: 10 * Math.floor((Math.random() * 30) + 1),\n        }\n\n        let bombs = this.state.bombs.slice();\n        bombs.push(newBomb);\n\n        const newState = {\n            ...this.state,\n            bombs: bombs,\n        };\n        this.setState(newState);\n        return;\n    }\n\n    hideRottenBombs = () => {\n        if(this.state.bombs.length === 1 || Math.floor((Math.random() * 30) + 1) !== 1) {\n            return;\n        }\n\n        let bombs = this.state.bombs.slice();\n\n        bombs.shift();\n\n        const newState = {\n            ...this.state,\n            bombs: bombs,\n        };\n        this.setState(newState);\n        return;\n    }\n\n  eatFruits = () => {\n    let growth = this.state.growth;\n    let fruits = this.state.fruits.slice();\n    const snakeHead = this.state.snakeSegments[0];\n\n    fruits.map(((fruit, index) => {\n      if(this.doItemsCollide(snakeHead, fruit)) {\n          fruits.splice(index, 1);\n          growth++;\n      }\n      return true;\n    }))\n\n      const newState = {\n          ...this.state,\n          fruits: fruits,\n          growth: growth,\n      };\n      this.setState(newState);\n      return;\n  }\n\n    eatBombs = () => {\n        const snakeHead = this.state.snakeSegments[0];\n\n        this.state.bombs.map(((bomb, index) => {\n            if(this.doItemsCollide(snakeHead, bomb)) {\n                this.gameOver();\n            }\n            return true;\n        }))\n    }\n\n  setDirection = (x, y)  => {\n\n    // don't go backwards\n    if(this.state.direction.x * x || this.state.direction.y * y) {\n        return;\n    }\n\n      const newState = {\n        ...this.state,\n        direction: {\n            x: x,\n            y: y,\n        },\n    };\n    this.setState(newState);\n  }\n\n  doItemsCollide = (a, b) => {\n    const minRequiredDistance = a.r + b.r;\n    return Math.abs(a.cx - b.cx) < minRequiredDistance\n      && Math.abs(a.cy - b.cy) < minRequiredDistance;\n  }\n\n  tick = () => {\n    // console.log('tick');\n    this.dieIfCollide();\n    if (this.state.paused) {\n        return;\n    }\n    this.eatBombs();\n    this.eatFruits();\n    this.moveSnake();\n    this.showNewFruits();\n    this.hideRottenFruits();\n    this.showNewBombs();\n    this.hideRottenBombs();\n   }\n\n   restart = () => {\n       if(this.state.gameOver) {\n           this.setState(this.defaultState);\n           this.start();\n       }\n   }\n\n   togglePause = ()  => {\n\n      if(this.state.gameOver) {\n          return;\n      }\n\n       if(this.state.paused) {\n         this.start();\n       } else {\n         this.pause();\n       }\n   }\n\n   pause = ()  => {\n       clearInterval(this.gameInterval);\n       const newState = {\n           ...this.state,\n           paused: true,\n       };\n       this.setState(newState);\n   }\n\n   start = ()  => {\n       this.gameInterval = setInterval(this.tick, this.props.speed);\n       const newState = {\n           ...this.state,\n           paused: false,\n       };\n       this.setState(newState);\n   }\n\n    componentDidMount() {\n        window.addEventListener('keydown', (e) => {\n            // console.log('keydown');\n            // console.log(e.keyCode);\n            // down\n            if (e.keyCode === 40) {\n                this.setDirection(0,1);\n            }\n            // up\n            if (e.keyCode === 38) {\n                this.setDirection(0,-1);\n            }\n            // left\n            if (e.keyCode === 37) {\n                this.setDirection(-1,0);\n            }\n            // right\n            if (e.keyCode === 39) {\n                this.setDirection(1,0);\n            }\n        })\n        window.addEventListener('keypress', (e) => {\n            // spacebar\n            if (e.keyCode === 32) {\n              this.togglePause();\n            }\n            // enter\n            if (e.keyCode === 13) {\n                this.restart();\n            }\n        });\n        this.start();\n    }\n\n  renderGameOver() {\n      if(this.state.gameOver) {\n          return (<div className='game-over'><p>Game over.<br/> Press 'enter' to continue.</p></div>);\n      }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"board\">\n            {this.renderGameOver()}\n          <svg height={this.props.boardHeight} width={this.props.boardWidth}>\n            <Snake snakeSegments={this.state.snakeSegments}/>\n              {\n                  this.state.fruits.map((fruit, index) => {\n                      return (\n                          <Fruit key={index} cx={fruit.cx} cy={fruit.cy} r={fruit.r} />\n                      )\n                  })\n              }\n              {\n                  this.state.bombs.map((bomb, index) => {\n                      return (\n                          <Bomb key={index} cx={bomb.cx} cy={bomb.cy} r={bomb.r} />\n                      )\n                  })\n              }\n          </svg>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}